::Q7::What is the routine we use to allocate dynamic memory in C?
{
=malloc()
~challoc()
~Allocate()
~free()
}

::Q8::When you are allocating dynamic memory in C, what is the unit of allocation?
{
=char
~int
~long
~byte
}

::Q9::[html]What is wrong with this code?
<pre>
struct lnode \{
    char *text;
    struct lnode *next;
\};
</pre>
{
=Nothing is wrong with this code
~You cannot have a semicolon after a struct definition
~You should not have a semicolon after the last member variable defined in a structure
~You cannot allocate pointers to a structure within the definition of a structure
}

::Q10::How do we know we have reached the end of a linked list in C?
{
=The "next" pointer in the item we are looking at is NULL
~We check the length of the pre-allocated list array
~We attempt to access the next item and it fails, triggering a catch block
~The return value for the call is -1 or 0
}

::Q11::What is a typical reason to use a doubly linked list over a singly linked list?
{
=So you can traverse the list in reverse
~To save memory by combining two pointers into one
~It is quicker to scan for a value in the list
~Each entry can store two string values in a doubly linked list
}

::Q12::The primary difference between a C union and a C structure is:
{
=The union allocates the members in a single overlapped memory space
~The structure allocates the members in a single overlapped memory space
~Strings are compressed in a union to save space
~A union can look up member values by passing a string to the getitem() function
~A union will expand when new data members are added after allocation
}

::Q13::When you are using bit fields in an C union, what aspect of computer architecture must be considered?
{
=The endianness of memory storage
~The relative sizes of int and pointer values
~Whether or not floating point is supported in hardware
~Whether or not stack frames are allocated upwards or downwards in memory
}

::Q14::What is the simple hashing function used in Section 6.6 of the
K\&R textbook?
{
=Sum up character values and apply the modulo operator
~Use the built-in MD5 computation
~Use a union to view character data as floating point numbers and pass them to an elliptical random number generator
~Use the SHA-256 algorithm and a modulo operator
}

::Q15::Why would one use a binary tree to store data instead of a linked list?
{
=To avoid quadratic running time
~To reduce memory use
~To impress an interviewer in a programming interview
~Because it does not require the use of self-referential pointers
}

::Q16::In Section 6.6 of K&R, what other data structure is being used to implement a hash map to store key/value pairs?
{
=A linked list
~A doubly linked list
~A binary tree
~An AVL tree
}

::Q17::What computer science concept is difficult to explain in general
and ignored in Dr. Chuck's Python book, but demonstrated simply and
beautifully in Section 6.5.2 in the K&R textbook?
{
=Recursion
~Turing computability
~NP-Completeness
~Floating point formats
}

